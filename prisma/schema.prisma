// output = "../src/generated/client"
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Follow {
  created_at                          DateTime?
  followed_user_id                    Int
  following_user_id                   Int
  id                                  Int       @default(autoincrement()) @id
  followed                            User      @relation("Follow_followed_user_idToUser", fields: [followed_user_id], references: [id])
  following                           User      @relation("Follow_following_user_idToUser", fields: [following_user_id], references: [id])
}

model Post {
  attatchment_url String?        @unique
  author_id       Int
  content         String
  created_at      DateTime?
  id              Int            @default(autoincrement()) @id
  priv_post       Boolean?       @default(true)
  author          User           @relation(fields: [author_id], references: [id])
  post_claps      Post_Clap[]
  post_comments   Post_Comment[]
  post_tags       Post_Tag[]
}

model Post_Clap {
  author_id Int
  id        Int  @default(autoincrement()) @id
  post_id   Int
  author    User @relation(fields: [author_id], references: [id])
  post      Post @relation(fields: [post_id], references: [id])
}

model Post_Comment {
  author_id          Int
  content            String?
  created_at         DateTime?
  id                 Int                 @default(autoincrement()) @id
  post_id            Int
  author             User                @relation(fields: [author_id], references: [id])
  post               Post                @relation(fields: [post_id], references: [id])
  post_comment_claps Post_Comment_Clap[]
}

model Post_Comment_Clap {
  author_id    Int
  comment_id   Int
  id           Int          @default(autoincrement()) @id
  author       User         @relation(fields: [author_id], references: [id])
  post_comment Post_Comment @relation(fields: [comment_id], references: [id])
}

model Post_Tag {
  id      Int  @default(autoincrement()) @id
  post_id Int
  tag_id  Int
  post    Post @relation(fields: [post_id], references: [id])
  tag     Tag  @relation(fields: [tag_id], references: [id])
}

model Question {
  attatchment_url   String?            @unique
  author_id         Int
  content           String
  created_at        DateTime?
  id                Int                @default(autoincrement()) @id
  priv_question     Boolean?           @default(true)
  response          String?
  author            User               @relation(fields: [author_id], references: [id])
  question_claps    Question_Clap[]
  question_comments Question_Comment[]
  question_tags     Question_Tag[]
}

model Question_Clap {
  author_id   Int
  id          Int      @default(autoincrement()) @id
  question_id Int
  author      User     @relation(fields: [author_id], references: [id])
  question    Question @relation(fields: [question_id], references: [id])
}

model Question_Comment {
  author_id              Int
  content                String?
  created_at             DateTime?
  id                     Int                     @default(autoincrement()) @id
  question_id            Int
  author                 User                    @relation(fields: [author_id], references: [id])
  question               Question                @relation(fields: [question_id], references: [id])
  question_comment_claps Question_Comment_Clap[]
}

model Question_Comment_Clap {
  author_id        Int
  comment_id       Int
  id               Int              @default(autoincrement()) @id
  author           User             @relation(fields: [author_id], references: [id])
  question_comment Question_Comment @relation(fields: [comment_id], references: [id])
}

model Question_Tag {
  id          Int      @default(autoincrement()) @id
  question_id Int
  tag_id      Int
  question    Question @relation(fields: [question_id], references: [id])
  tag         Tag      @relation(fields: [tag_id], references: [id])
}

model Tag {
  id             Int            @default(autoincrement()) @id
  tag            String?
  post_tags      Post_Tag[]
  question_tags  Question_Tag[]
}

model User {
  created_at                             DateTime?
  email                                  String
  first                                  String
  id                                     Int                     @default(autoincrement()) @id
  last                                   String
  location                               String
  password                               String
  phone                                  String
  profile_pic_url                        String
  quote                                  String?
  role_type                              role_enum?              @default(USER)
  username                               String                  @unique
  followers                              Follow[]                @relation("Follow_followed_user_idToUser")
  following                              Follow[]                @relation("Follow_following_user_idToUser")
  posts                                  Post[]
  post_claps                             Post_Clap[]
  post_comments                          Post_Comment[]
  post_comment_claps                     Post_Comment_Clap[]
  questions                              Question[]
  question_claps                         Question_Clap[]
  question_comments                      Question_Comment[]
  question_comment_claps                 Question_Comment_Clap[]
}

enum role_enum {
  ADMIN
  USER
}